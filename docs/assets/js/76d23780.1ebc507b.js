"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[924],{8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>d});var t=n(6540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}},8765:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Database/utilities","title":"CRUD Helpers","description":"godoc","source":"@site/docs/Database/utilities.md","sourceDirName":"Database","slug":"/Database/utilities","permalink":"/gowebutils/docs/Database/utilities","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/Database/utilities.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/gowebutils/docs/Database/intro"},"next":{"title":"Query Builder","permalink":"/gowebutils/docs/Database/querybuilder"}}');var s=n(4848),a=n(8453);const i={sidebar_position:2},d="CRUD Helpers",l={},o=[{value:"Usage",id:"usage",level:2},{value:"Create",id:"create",level:3},{value:"Read",id:"read",level:3},{value:"Get By ID",id:"get-by-id",level:4},{value:"Get By",id:"get-by",level:4},{value:"Exists",id:"exists",level:4},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Example",id:"example",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"crud-helpers",children:"CRUD Helpers"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://pkg.go.dev/github.com/gurch101/gowebutils/pkg/dbutils",children:"godoc"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"dbutils"})," package provides a set of helper functions for performing CRUD (Create, Read, Update, Delete) operations on single records. The only requirement for these helpers is that the datable tables need to have a unique numeric ",(0,s.jsx)(r.code,{children:"id"})," column and a numeric ",(0,s.jsx)(r.code,{children:"version"})," column."]}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.h3,{id:"create",children:"Create"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Insert"})," function inserts a single record into a table. It takes a context, a database connection, a table name, and a map of column names and values. It returns the ID of the inserted record and an error if any."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'type User struct {\n  ID      int64\n  Name   string\n  Email  string\n  Version int64\n}\n\nfunc InsertUser(ctx context.Context, db dbutil.DB, user *User) (*int64, error) {\n  return dbutils.Insert(ctx, db, "users", map[string]any{\n    "name":   user.Name,\n    "email": user.Email,\n  })\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"read",children:"Read"}),"\n",(0,s.jsx)(r.p,{children:"There are a few ways to read a record from the database."}),"\n",(0,s.jsx)(r.h4,{id:"get-by-id",children:"Get By ID"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"GetByID"})," function retrieves a single record from a table by its ID. It takes a context, a database connection, a table name, and an id. It returns a pointer to the record and an error, if any. If no record is found, a ",(0,s.jsx)(r.code,{children:"dbutils.ErrRecordNotFound"})," error is returned."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'func GetUserByID(ctx context.Context, db dbutils.DB, userid int64) (authutils.User, error) {\n  var user User\n  err := dbutils.GetByID(ctx, db, "users", userid, map[string]any{\n    "id":        &user.ID,\n    "name":      &user.Name,\n    "email":     &user.Email,\n  })\n\n  if err != nil {\n    return authutils.User{}, fmt.Errorf("get user query failed: %w", err)\n  }\n\n  return user, nil\n}\n'})}),"\n",(0,s.jsx)(r.h4,{id:"get-by",children:"Get By"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"GetBy"})," function retrieves a single record from a table by a where clause. It takes a context, a database connection, a table name, an id, and a map of fields to return. It returns an error, if any. If no record is found, a ",(0,s.jsx)(r.code,{children:"dbutils.ErrRecordNotFound"})," error is returned. If more than on record is found, only the first record is scanned."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'func GetUserByEmail(ctx context.Context, db dbutils.DB, email string) (authutils.User, error) {\n  var user User\n  err := dbutils.GetBy(ctx, db, "users", userid, map[string]any{\n    "id":        &user.ID,\n    "name":      &user.Name,\n    "email":     &user.Email,\n  }, map[string]any {\n    "email": email,\n  })\n\n  if err != nil {\n    return authutils.User{}, fmt.Errorf("get user query failed: %w", err)\n  }\n\n  return user, nil\n}\n'})}),"\n",(0,s.jsx)(r.h4,{id:"exists",children:"Exists"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Exists"})," function checks if a record exists in a table by id. It takes a context, a database connection, a table name, and an id. It returns a boolean."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'func GetUserExists(ctx context.Context, db dbutils.DB, id int64) bool {\n  return dbutils.Exists(ctx, db, "users", id)\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"update",children:"Update"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Update"})," function updates a single record in a table. It takes a context, a database connection, a table name, an id and version, and a map of column names and values to update. It returns an error, if any. If the version does not match, a ",(0,s.jsx)(r.code,{children:"ErrEditConflict"})," error is returned."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'func UpdateUser(ctx context.Context, db dbutils.DB, user *User) error {\n  return dbutils.UpdateByID(ctx, db, "users", user.ID, user.Version, map[string]any{\n    "name":   user.Name,\n    "email": user.Email,\n  })\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"delete",children:"Delete"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Delete"})," function deletes a single record from a table. It takes a context, a database connection, a table name, and an id. It returns an error, if any."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'func DeleteTenantByID(ctx context.Context, db dbutils.DB, userID int64) error {\n  return dbutils.DeleteByID(ctx, db, "users", userID)\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(r.p,{children:["All sql errors returned by the ",(0,s.jsx)(r.code,{children:"dbutils"})," helper functions are wrapped. See ",(0,s.jsx)(r.a,{href:"https://pkg.go.dev/github.com/gurch101/gowebutils/pkg/dbutils#pkg-variables",children:"errors"})," for all possible errors. Use ",(0,s.jsx)(r.code,{children:"errors.Is"})," to check for specific errors and handle them accordingly."]}),"\n",(0,s.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'if errors.Is(err, dbutils.ErrUniqueConstraint) && strings.Contains(err.Error(), "name") {\n  return nil, ErrUserAlreadyRegistered\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);