"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[133],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},8800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"testing","title":"Testing","description":"gowebutils encourages end-to-end testing of your application from handlers to live database queries. To bootstrap your application for testing, you can use helpers in the testutils package:","source":"@site/docs/testing.md","sourceDirName":".","slug":"/testing","permalink":"/gowebutils/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTML Templates","permalink":"/gowebutils/docs/templates"},"next":{"title":"Request Validation","permalink":"/gowebutils/docs/validation"}}');var a=n(4848),r=n(8453);const o={},i="Testing",c={},l=[];function u(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"gowebutils"})," encourages end-to-end testing of your application from handlers to live database queries. To bootstrap your application for testing, you can use helpers in the ",(0,a.jsx)(t.code,{children:"testutils"})," package:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'func TestCreateTenant(t *testing.T) {\n  t.Parallel()\n  app := testutils.NewTestApp(t)\n  defer app.Close()\n\n  createTenantController := NewCreateTenantController(app.App)\n  app.TestRouter.Post("/tenants", createTenantController.CreateTenantHandler)\n\n  // Define the input JSON for the request\n  createTenantRequest := map[string]interface{}{\n    "tenantName":   "TestTenant",\n    "contactEmail": "test@example.com",\n    "plan":         "free",\n  }\n\n  req := testutils.CreatePostRequest(t, "/tenants", createTenantRequest)\n  rr := app.MakeRequest(req)\n\n  // Make assertions...\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);