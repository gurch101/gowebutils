"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[236],{2442:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"mail","title":"Mail","description":"godoc","source":"@site/docs/mail.md","sourceDirName":".","slug":"/mail","permalink":"/gowebutils/docs/mail","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/mail.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Generators","permalink":"/gowebutils/docs/generators"},"next":{"title":"Middleware","permalink":"/gowebutils/docs/middleware"}}');var l=i(4848),a=i(8453);const s={},r="Mail",o={},c=[{value:"Initialization",id:"initialization",level:3},{value:"Usage",id:"usage",level:3},{value:"Email Templates",id:"email-templates",level:3},{value:"Example Template",id:"example-template",level:4},{value:"Testing",id:"testing",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"mail",children:"Mail"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gurch101/gowebutils/pkg/mailutils",children:(0,l.jsx)(n.code,{children:"godoc"})})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"mailutils"})," package provides a simple way to send templated emails asynchronously via goroutines."]}),"\n",(0,l.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,l.jsx)(n.p,{children:"To initialize the mailer, follow these steps:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["When creating the ",(0,l.jsx)(n.code,{children:"App"})," instance, embed your email templates and pass them to the ",(0,l.jsx)(n.code,{children:"app.NewApp"})," function."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:'//go:embed templates/email\nvar emailTemplates embed.FS\n\nfunc main() {\n  app, err := app.NewApp(\n    app.WithEmailTemplates(emailTemplates),\n  )\n  if err != nil {\n    log.Fatal("Failed to initialize app:", err)\n  }\n}\n'})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsx)(n.li,{children:"Configure SMTP Settings"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Start your app with the following environment variables:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'export SMTP_HOST="my.smtp.host.com"\nexport SMTP_PORT="587"\nexport SMTP_USERNAME="myusername"\nexport SMTP_PASSWORD="mypassword"\nexport SMTP_FROM="admin@myapp.com" # Default "From" email address\n'})}),"\n",(0,l.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,l.jsxs)(n.p,{children:["Once initialized, the mailer is accessible via the ",(0,l.jsx)(n.code,{children:"App"})," instance. Use the ",(0,l.jsx)(n.code,{children:"Send"})," method to send emails asynchronously."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:'app.Mailer.Send(\n  "recipient@example.com", // Recipient email address\n  "mytemplatename.go.tmpl", // Email template name relative to the embedded filesystem directory\n  map[string]string{ // Template data\n    "name": "John Doe",\n  },\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"email-templates",children:"Email Templates"}),"\n",(0,l.jsxs)(n.p,{children:["The mailer uses Go's ",(0,l.jsx)(n.code,{children:"html/template"})," package to render email content. Each template must define three sections:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"subject"}),": The email subject."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plainBody"}),": The plain text version of the email body."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"htmlBody"}),": The HTML version of the email body."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"example-template",children:"Example Template"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:'{{define "subject"}}Hello {{.name}}!{{end}}\n{{define "plainBody"}}Hello {{.name}}, this is a plain text email.{{end}}\n{{define "htmlBody"}}<h1>Hello {{.name}}</h1>, <p>this is an html email.</p>{{end}}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,l.jsxs)(n.p,{children:["Use a ",(0,l.jsx)(n.code,{children:"MockMailer"})," to test email template rendering without sending actual emails. In your tests, replace the ",(0,l.jsx)(n.code,{children:"Mailer"})," instance with a ",(0,l.jsx)(n.code,{children:"MockMailer"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:'  emailer := mailutils.NewMockMailer(mailutils.WithEmailTemplateMap(templates))\n  // or\n  emailer := mailutils.NewMockMailer(mailutils.WithEmailTemplates(templateFS))\n\n  emailer.Send("recipient@example.com", "mytemplatename.go.tmpl", map[string]string{"name": "John Doe"})\n  msg := emailer.MessageToString(0)\n\n  if ! strings.Contains(msg, "Hello John Doe") {\n    t.Errorf("Expected email to contain \'Hello John Doe\', but got: %s", msg)\n  }\n'})}),"\n",(0,l.jsxs)(n.p,{children:["If you are writing an end-to-end test that requires a mock mailer, you can use ",(0,l.jsx)(n.code,{children:"NewTestApp"})," with an email template option."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:"  app := testutils.NewTestApp(t, testutils.WithEmailTemplates(templatesFS))\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(6540);const l={},a=t.createContext(l);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);