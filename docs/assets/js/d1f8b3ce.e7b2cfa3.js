"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[353],{5792:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>c,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"Database/querybuilder","title":"Query Builder","description":"While the dbutils CRUD helper functions are useful for simple database operations, they may not be sufficient for complex or dynamic queries. For these scenarios, gowebutils provides a powerful querybuilder that supports:","source":"@site/docs/Database/querybuilder.md","sourceDirName":"Database","slug":"/Database/querybuilder","permalink":"/gowebutils/docs/Database/querybuilder","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/Database/querybuilder.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"CRUD Helpers","permalink":"/gowebutils/docs/Database/utilities"},"next":{"title":"Transactions","permalink":"/gowebutils/docs/Database/transactions"}}');var i=s(4848),a=s(8453);const t={sidebar_position:3},u="Query Builder",d={},o=[{value:"Basic Usage",id:"basic-usage",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3},{value:"Handling NULL Values",id:"handling-null-values",level:3},{value:"Getting the Raw Query",id:"getting-the-raw-query",level:3}];function l(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"query-builder",children:"Query Builder"})}),"\n",(0,i.jsx)(n.p,{children:"While the dbutils CRUD helper functions are useful for simple database operations, they may not be sufficient for complex or dynamic queries. For these scenarios, gowebutils provides a powerful querybuilder that supports:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Joins"}),"\n",(0,i.jsx)(n.li,{children:"Complex WHERE clauses"}),"\n",(0,i.jsx)(n.li,{children:"GROUP BY statements"}),"\n",(0,i.jsx)(n.li,{children:"ORDER BY clauses"}),"\n",(0,i.jsx)(n.li,{children:"LIMIT and OFFSET pagination"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Executes:\n// SELECT id, name, age FROM users WHERE (age > 18) OR (name LIKE "%doe%")\n// LIMIT 10 OFFSET 10\nquerybuilder := dbutils.NewQueryBuilder(db).\n  Select("id", "name", "age").\n  From("users").\n  Where("age > ?", 18).\n  OrWhereLike("name", dbutils.OpContains, "doe").\n  Limit(10).\n  Offset(10).\n  Query(func(rows *sql.Rows) error {\n    // do something with rows\n  })\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// runs SELECT u.id, COUNT(c.comments) FROM users u\n// INNER JOIN comments c ON u.id = c.user_id\n// WHERE (u.age > 18) AND (u.active) OR (u.name = "doe")\n// GROUP BY u.id ORDER BY u.name DESC LIMIT 10 OFFSET 20\nqueryBuilder := dbutils.NewQueryBuilder(db).\n  Select("u.id", "COUNT(c.comments)").\n  From("users u").\n  Join("INNER", "comments c", "u.id = c.user_id").\n  Where("u.age > ?", 18).\n  AndWhere("u.active = ?", true).\n  OrWhere("u.name = ?", "doe").\n  GroupBy("u.id").\n  // -<fieldname> is used for descending order\n  // <fieldname> is used for ascending order\n  OrderBy("-u.name").\n  Limit(10).\n  Offset(20).\n  Query(func(rows *sql.Rows) error {\n    // do something with rows\n  })\n'})}),"\n",(0,i.jsx)(n.h3,{id:"handling-null-values",children:"Handling NULL Values"}),"\n",(0,i.jsx)(n.p,{children:"NULL values passed to any of the WHERE clause functions are automatically ignored. This feature allows you to avoid conditional branching in your code when dealing with optional filter parameters."}),"\n",(0,i.jsx)(n.h3,{id:"getting-the-raw-query",children:"Getting the Raw Query"}),"\n",(0,i.jsx)(n.p,{children:"If you need the raw SQL query and arguments instead of executing it directly, use the Build() method:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'\tqb := dbutils.NewQueryBuilder(db).Select("id", "name").From("users").Where("id = ?", 1)\n\t// query = SELECT id, name FROM users WHERE (id = ?)\n\t// args = []{1}\n\tquery, args := qb.Build()\n'})}),"\n",(0,i.jsx)(n.p,{children:"This approach is useful when you need to use the query with other database functions or for debugging purposes."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>u});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);