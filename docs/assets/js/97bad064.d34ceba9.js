"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[826],{5199:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"request","title":"Working with Requests and Responses","description":"gowebutils builds upon Go\'s standard net/http package, providing helper functions that simplify common request and response handling tasks.","source":"@site/docs/request.md","sourceDirName":".","slug":"/request","permalink":"/gowebutils/docs/request","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/request.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Payments","permalink":"/gowebutils/docs/payments"},"next":{"title":"Routing","permalink":"/gowebutils/docs/routing"}}');var t=n(4848),i=n(8453);const o={},a="Working with Requests and Responses",l={},u=[{value:"Request Parsing",id:"request-parsing",level:3},{value:"Path Parameters",id:"path-parameters",level:4},{value:"Query Parameters",id:"query-parameters",level:4},{value:"Request Body",id:"request-body",level:4},{value:"Response Handling",id:"response-handling",level:3},{value:"JSON Responses",id:"json-responses",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Working with Request Context",id:"working-with-request-context",level:3},{value:"Request ID",id:"request-id",level:4},{value:"User Information",id:"user-information",level:3}];function d(e){const r={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"working-with-requests-and-responses",children:"Working with Requests and Responses"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"gowebutils"})," builds upon Go's standard ",(0,t.jsx)(r.code,{children:"net/http"})," package, providing helper functions that simplify common request and response handling tasks."]}),"\n",(0,t.jsx)(r.h3,{id:"request-parsing",children:"Request Parsing"}),"\n",(0,t.jsx)(r.h4,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,t.jsx)(r.p,{children:"Extract values from URL path segments:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'import (\n  "net/http"\n  "github.com/gurch101/gowebutils/pkg/parser"\n)\n\n// 1. Define your route with path parameters\napp.AddProtectedRoute("GET", "/api/users/:id", usersController.GetUser)\n\n// 2. Parse the path parameters in your handler\nfunc (c *UsersController) GetUser(w http.ResponseWriter, r *http.Request) {\n  // Extract the :id parameter as an int64\n  // Returns ErrInvalidPathParam if parameter is missing or invalid\n  id, err := parser.ParseIDPathParam(r)\n  if err != nil {\n    // Handle error\n  }\n\n  // Continue with handler logic\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsx)(r.p,{children:"Parse URL query string parameters with type conversion and default values:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func (c *UsersController) SearchUsers(w http.ResponseWriter, r *http.Request) {\n  queryString := r.URL.Query()\n\n  searchUsersRequest := &SearchTenantsRequest{\n    // Get "name" as string (returns nil if not present)\n    Name: parser.ParseQSString(queryString, "name", nil),\n    // Get "isActive" as bool (returns true if not present)\n    IsActive: parser.ParseQSBool(queryString, "isActive", true),\n    // Get "numberOfResults" as int (returns 100 if not present)\n    NumberOfResults: parser.ParseQSInt(queryString, "numberOfResults", 100),\n\t}\n\n  // Use the parsed parameters\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsx)(r.p,{children:"Parse JSON request bodies into typed structs:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'type CreateUserRequest struct {\n  Name   string    `json:"userName"`\n  Email string     `json:"email"`\n}\n\nfunc (c *UsersController) CreateUser(w http.ResponseWriter, r *http.Request) {\n  // Parse JSON body into CreateUserRequest struct\n  // Returns ErrInvalidJSON if body is invalid\n  // Returns error if body contains unknown fields\n  createUserRequest, err := httputils.ReadJSON[CreateUserRequest](w, r)\n  if err != nil {\n    httputils.UnprocessableEntityResponse(w, r, err)\n\n    return\n  }\n\n  // Use the parsed request\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"response-handling",children:"Response Handling"}),"\n",(0,t.jsx)(r.h4,{id:"json-responses",children:"JSON Responses"}),"\n",(0,t.jsx)(r.p,{children:"Send structured JSON responses:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"func (c *TenantsController) GetUser(w http.ResponseWriter, r *http.Request) {\n  // ...\n  // Write JSON response with status code and optional headers\n  err = httputils.WriteJSON(w, http.StatusOK, &GetTenantResponse{\n    ID:     user.ID,\n    Name:   user.Name,\n    email:  user.Email,\n  }, nil)\n\n  if err != nil {\n    httputils.ServerErrorResponse(w, r, err)\n  }\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(r.p,{children:"Send consistent error responses using the provided helper functions:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// Available error response helpers:\nhttputils.BadRequestResponse(w, r, err)\nhttputils.EditConflictResponse(w, r)\nhttputils.FailedValidationResponse(w, r, errors)\nhttputils.NotFoundResponse(w, r)\nhttputils.RateLimitExceededResponse(w, r)\nhttputils.ServerErrorResponse(w, r, err)\nhttputils.UnauthorizedResponse(w, r)\nhttputils.UnprocessableEntityResponse(w, r, err)\n"})}),"\n",(0,t.jsx)(r.p,{children:"For service-layer errors, use the generic error handler:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// Automatically selects the appropriate error response\n// based on the error type\nhttputils.HandleErrorResponse(w, r, err)\n"})}),"\n",(0,t.jsx)(r.h3,{id:"working-with-request-context",children:"Working with Request Context"}),"\n",(0,t.jsx)(r.h4,{id:"request-id",children:"Request ID"}),"\n",(0,t.jsxs)(r.p,{children:["Every request processed by routes registered with ",(0,t.jsx)(r.code,{children:"app.AddPublicRoute"}),", ",(0,t.jsx)(r.code,{children:"app.AddProtectedRoute"}),", or ",(0,t.jsx)(r.code,{children:"app.AddProtectedRouteWithPermission"})," includes a unique ",(0,t.jsx)(r.code,{children:"RequestIDKey"})," in the request context. This ID is automatically included in all ",(0,t.jsx)(r.code,{children:"slog"})," log entries."]}),"\n",(0,t.jsx)(r.h3,{id:"user-information",children:"User Information"}),"\n",(0,t.jsx)(r.p,{children:"For protected routes, you can access the authenticated user:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// Get the current user from the request context\nuser := authutils.GetUserFromContext(request.Context())\n"})}),"\n",(0,t.jsx)(r.p,{children:"This provides a convenient way to access user information in your handler functions."})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var s=n(6540);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);