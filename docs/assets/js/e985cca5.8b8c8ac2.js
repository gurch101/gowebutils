"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[532],{5205:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Database/testing","title":"Database Testing","description":"gowebutils simplifies database integration testing by providing utilities to work with real databases in your test environment.","source":"@site/docs/Database/testing.md","sourceDirName":"Database","slug":"/Database/testing","permalink":"/gowebutils/docs/Database/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/Database/testing.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Transactions","permalink":"/gowebutils/docs/Database/transactions"},"next":{"title":"Authentication","permalink":"/gowebutils/docs/authentication"}}');var n=s(4848),i=s(8453);const r={sidebar_position:5},o="Database Testing",c={},d=[{value:"Setting Up a Test Database",id:"setting-up-a-test-database",level:3},{value:"Benefits",id:"benefits",level:3}];function l(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"database-testing",children:"Database Testing"})}),"\n",(0,n.jsx)(t.p,{children:"gowebutils simplifies database integration testing by providing utilities to work with real databases in your test environment."}),"\n",(0,n.jsx)(t.h3,{id:"setting-up-a-test-database",children:"Setting Up a Test Database"}),"\n",(0,n.jsx)(t.p,{children:"To create an in-memory SQLite database for your tests, use the testutils.SetupTestDB function:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"func TestDatabaseOperations(t *testing.T) {\n  // Create a test database with migrations and seed data applied\n  db := testutils.SetupTestDB(t)\n  defer db.Close()\n\n  // Your test code here\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"The SetupTestDB function:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Creates an in-memory SQLite database"}),"\n",(0,n.jsx)(t.li,{children:"Automatically applies all migrations from your db/migrations directory"}),"\n",(0,n.jsx)(t.li,{children:"Loads test data from your db/data directory"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This approach ensures your tests run against a database with the same schema and constraints as your production environment, while maintaining test isolation and performance."}),"\n",(0,n.jsx)(t.h3,{id:"benefits",children:"Benefits"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Realistic testing: Test against actual database behavior rather than mocks"}),"\n",(0,n.jsx)(t.li,{children:"Isolation: Each test gets a fresh database instance"}),"\n",(0,n.jsx)(t.li,{children:"Performance: In-memory SQLite is fast enough for most test suites"}),"\n",(0,n.jsx)(t.li,{children:"Simplicity: No need to manage external test databases"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"By using real databases for testing, you can catch issues that might not be apparent when using mocks or stubs."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var a=s(6540);const n={},i=a.createContext(n);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);