"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[924],{8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var s=n(6540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}},8765:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Database/utilities","title":"CRUD Helpers","description":"godoc","source":"@site/docs/Database/utilities.md","sourceDirName":"Database","slug":"/Database/utilities","permalink":"/gowebutils/docs/Database/utilities","draft":false,"unlisted":false,"editUrl":"https://github.com/gurch101/gowebutils/tree/main/packages/create-docusaurus/templates/shared/docs/Database/utilities.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/gowebutils/docs/Database/intro"},"next":{"title":"Query Builder","permalink":"/gowebutils/docs/Database/querybuilder"}}');var t=n(4848),i=n(8453);const a={sidebar_position:2},l="CRUD Helpers",d={},o=[{value:"Requirements",id:"requirements",level:3},{value:"Create Operations",id:"create-operations",level:3},{value:"Insert",id:"insert",level:4},{value:"Read Operations",id:"read-operations",level:3},{value:"Get By ID",id:"get-by-id",level:4},{value:"Get By",id:"get-by",level:4},{value:"Exists",id:"exists",level:4},{value:"Exists By",id:"exists-by",level:4},{value:"Update Operations",id:"update-operations",level:3},{value:"Update By ID",id:"update-by-id",level:4},{value:"Delete Operations",id:"delete-operations",level:3},{value:"Delete By ID",id:"delete-by-id",level:4},{value:"Error Handling",id:"error-handling",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"crud-helpers",children:"CRUD Helpers"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://pkg.go.dev/github.com/gurch101/gowebutils/pkg/dbutils",children:"godoc"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"dbutils"})," package provides a set of helper functions for performing CRUD (Create, Read, Update, Delete) operations on single database records. These helpers simplify common database tasks while maintaining proper error handling and data consistency."]}),"\n",(0,t.jsx)(r.h3,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsx)(r.p,{children:"To use these helper functions, your database tables must have:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"A unique numeric id column"}),"\n",(0,t.jsx)(r.li,{children:"A numeric version column for optimistic concurrency control"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"create-operations",children:"Create Operations"}),"\n",(0,t.jsx)(r.h4,{id:"insert",children:"Insert"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"Insert"})," function adds a single record to a table and returns the ID of the newly created record."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'type User struct {\n  ID      int64\n  Name   string\n  Email  string\n  Version int64\n}\n\nfunc InsertUser(ctx context.Context, db dbutil.DB, user *User) (*int64, error) {\n  return dbutils.Insert(ctx, db, "users", map[string]any{\n    "name":   user.Name,\n    "email": user.Email,\n  })\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"read-operations",children:"Read Operations"}),"\n",(0,t.jsx)(r.h4,{id:"get-by-id",children:"Get By ID"}),"\n",(0,t.jsxs)(r.p,{children:["Retrieves a single record by its ID. Returns ",(0,t.jsx)(r.code,{children:"dbutils.ErrRecordNotFound"})," if no matching record exists."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func GetUserByID(ctx context.Context, db dbutils.DB, userid int64) (authutils.User, error) {\n  var user User\n  err := dbutils.GetByID(ctx, db, "users", userid, map[string]any{\n    "id":        &user.ID,\n    "name":      &user.Name,\n    "email":     &user.Email,\n  })\n\n  if err != nil {\n    return authutils.User{}, fmt.Errorf("get user query failed: %w", err)\n  }\n\n  return user, nil\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"get-by",children:"Get By"}),"\n",(0,t.jsxs)(r.p,{children:["Retrieves a single record using a custom WHERE clause. Returns ",(0,t.jsx)(r.code,{children:"dbutils.ErrRecordNotFound"})," if no matching record exists. If multiple records match, only the first one is returned."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func GetUserByEmail(ctx context.Context, db dbutils.DB, email string) (authutils.User, error) {\n  var user User\n  err := dbutils.GetBy(ctx, db, "users", userid, map[string]any{\n    "id":        &user.ID,\n    "name":      &user.Name,\n    "email":     &user.Email,\n  }, map[string]any {\n    "email": email,\n  })\n\n  if err != nil {\n    return authutils.User{}, fmt.Errorf("get user query failed: %w", err)\n  }\n\n  return user, nil\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"exists",children:"Exists"}),"\n",(0,t.jsx)(r.p,{children:"Checks if a record with the specified ID exists in the table."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func GetUserExists(ctx context.Context, db dbutils.DB, id int64) bool {\n  return dbutils.Exists(ctx, db, "users", id)\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"exists-by",children:"Exists By"}),"\n",(0,t.jsx)(r.p,{children:"Checks if a record exists in the table using a custom WHERE clause."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func GetUserExistsByEmail(ctx context.Context, db dbutils.DB, email string) bool {\n  return dbutils.ExistsBy(ctx, db, "users", map[string]any{\n    "email": "test@example.com",\n  })\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"update-operations",children:"Update Operations"}),"\n",(0,t.jsx)(r.h4,{id:"update-by-id",children:"Update By ID"}),"\n",(0,t.jsxs)(r.p,{children:["Updates a record with optimistic concurrency control using the version column. Returns ",(0,t.jsx)(r.code,{children:"ErrEditConflict"})," if the version doesn't match (indicating the record was modified by another process)."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func UpdateUser(ctx context.Context, db dbutils.DB, user *User) error {\n  return dbutils.UpdateByID(ctx, db, "users", user.ID, user.Version, map[string]any{\n    "name":   user.Name,\n    "email": user.Email,\n  })\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"delete-operations",children:"Delete Operations"}),"\n",(0,t.jsx)(r.h4,{id:"delete-by-id",children:"Delete By ID"}),"\n",(0,t.jsx)(r.p,{children:"Removes a record from the table by its ID."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func DeleteTenantByID(ctx context.Context, db dbutils.DB, userID int64) error {\n  return dbutils.DeleteByID(ctx, db, "users", userID)\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(r.p,{children:["All SQL errors returned by the ",(0,t.jsx)(r.code,{children:"dbutils"})," helper functions are wrapped with additional context. Use ",(0,t.jsx)(r.code,{children:"errors.Is"})," to check for specific error types and handle them appropriately."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'if errors.Is(err, dbutils.ErrUniqueConstraint) && strings.Contains(err.Error(), "name") {\n  return nil, ErrUserAlreadyRegistered\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["See the ",(0,t.jsx)(r.a,{href:"https://pkg.go.dev/github.com/gurch101/gowebutils/pkg/dbutils#pkg-variables",children:"package documentation"})," for a complete list of error types."]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);