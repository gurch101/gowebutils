package users_test

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	"github.com/gurch101/gowebutils/internal/users"
	"github.com/gurch101/gowebutils/pkg/testutils"
)

func TestGetUserByID(t *testing.T) {
	t.Parallel()

	t.Run("successful get by id", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		createReq := users.CreateUserRequest{
			Name:  "name",
			Email: "email@example.com",
		}
		ID, err := users.CreateUser(context.Background(), app.DB(), &createReq)
		if err != nil {
			t.Fatal(err)
		}

		controller := users.NewGetUserByIDController(app.App)
		app.TestRouter.Get("/users/{id}", controller.GetUserByIDHandler)

		req := testutils.CreateGetRequest(t, fmt.Sprintf("/users/%d", *ID))
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusOK {
			t.Errorf("expected status code %d, got %d", http.StatusOK, rr.Code)
		}

		var response users.GetUserByIDResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		if err != nil {
			t.Fatal(err)
		}

		if response.ID != int64(*ID) {
			t.Errorf("expected ID to be %d, got %d", ID, response.ID)
		}
		if response.Name != createReq.Name {
			t.Errorf("expected name to be %s, got %s", createReq.Name, response.Name)
		}
		if response.Email != createReq.Email {
			t.Errorf("expected email to be %s, got %s", createReq.Email, response.Email)
		}
		if response.CreatedAt.IsZero() {
			t.Error("expected CreatedAt to be set")
		}
		if response.UpdatedAt.IsZero() {
			t.Error("expected UpdatedAt to be set")
		}
	})

	t.Run("record not found", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewGetUserByIDController(app.App)
		app.TestRouter.Get("/users/{id}", controller.GetUserByIDHandler)

		nonExistentID := int64(9999)
		req := testutils.CreateGetRequest(t, fmt.Sprintf("/users/%d", nonExistentID))
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, rr.Code)
		}
	})

	t.Run("invalid ID format", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewGetUserByIDController(app.App)
		app.TestRouter.Get("/users/{id}", controller.GetUserByIDHandler)

		req := testutils.CreateGetRequest(t, "/users/invalid")
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, rr.Code)
		}
	})
}
