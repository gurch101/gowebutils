package users_test

import (
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	"github.com/gurch101/gowebutils/internal/users"
	"github.com/gurch101/gowebutils/pkg/testutils"

	"github.com/gurch101/gowebutils/pkg/collectionutils"
	"github.com/gurch101/gowebutils/pkg/httputils"
	"github.com/gurch101/gowebutils/pkg/validation"
)

func TestUpdateUserHandler(t *testing.T) {
	t.Parallel()

	t.Run("successful update", func(t *testing.T) {
		app := testutils.NewTestApp(t)

		defer app.Close()

		ID, _ := users.CreateTestUser(t, app.DB())

		controller := users.NewUpdateUserController(app.App)
		app.TestRouter.Patch("/users/{id}", controller.UpdateUserHandler)

		updateReq := users.CreateTestUpdateUserRequestWithValues(t, users.UpdateUserRequest{
			TenantID: testutils.Int64Ptr(1),
		})

		req := testutils.CreatePatchRequest(t, fmt.Sprintf("/users/%d", ID), updateReq)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusOK {
			t.Errorf("expected status code %d, got %d", http.StatusOK, rr.Code)
		}

		var response users.GetUserByIDResponse
		err := json.Unmarshal(rr.Body.Bytes(), &response)
		if err != nil {
			t.Fatal(err)
		}

		if response.ID != ID {
			t.Errorf("expected ID to be %d, got %d", ID, response.ID)
		}
		if response.Name != *updateReq.Name {
			t.Errorf("expected Name to be %v, got %v", *updateReq.Name, response.Name)
		}
		if response.Email != *updateReq.Email {
			t.Errorf("expected Email to be %v, got %v", *updateReq.Email, response.Email)
		}
		if response.SomeInt64 != *updateReq.SomeInt64 {
			t.Errorf("expected SomeInt64 to be %v, got %v", *updateReq.SomeInt64, response.SomeInt64)
		}
		if response.TenantID != *updateReq.TenantID {
			t.Errorf("expected TenantID to be %v, got %v", *updateReq.TenantID, response.TenantID)
		}
		if response.SomeBool != *updateReq.SomeBool {
			t.Errorf("expected SomeBool to be %v, got %v", *updateReq.SomeBool, response.SomeBool)
		}
	})

	t.Run("invalid request id", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewUpdateUserController(app.App)
		app.TestRouter.Patch("/users/{id}", controller.UpdateUserHandler)
		req := testutils.CreatePatchRequest(t, "/users/invalid_id", nil)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, rr.Code)
		}
	})

	t.Run("record not found", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewUpdateUserController(app.App)
		app.TestRouter.Patch("/users/{id}", controller.UpdateUserHandler)

		nonExistentID := int64(9999)
		updateReq := users.CreateTestUpdateUserRequest(t)

		req := testutils.CreatePatchRequest(t, fmt.Sprintf("/users/%d", nonExistentID), updateReq)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, rr.Code)
		}
	})
	t.Run("invalid Tenant foreign key", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		ID, _ := users.CreateTestUser(t, app.DB())

		controller := users.NewUpdateUserController(app.App)
		app.TestRouter.Patch("/users/{id}", controller.UpdateUserHandler)

		updateReq := users.CreateTestUpdateUserRequestWithValues(t, users.UpdateUserRequest{
			TenantID: testutils.Int64Ptr(2),
		})

		req := testutils.CreatePatchRequest(t, fmt.Sprintf("/users/%d", ID), updateReq)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusBadRequest {
			t.Errorf("expected status code %d, got %d", http.StatusBadRequest, rr.Code)
		}

		var errorResponse httputils.ErrorResponse
		err := json.Unmarshal(rr.Body.Bytes(), &errorResponse)
		if err != nil {
			t.Fatal(err)
		}

		ok := collectionutils.Contains(errorResponse.Errors, func(e validation.Error) bool {
			return e.Field == "tenantId" && e.Message == "Tenant not found"
		})

		if !ok {
			t.Errorf("Expected error message for tenantId, but got none")
		}
	})

	t.Run("invalid request payload", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		ID, _ := users.CreateTestUser(t, app.DB())

		controller := users.NewUpdateUserController(app.App)
		app.TestRouter.Patch("/users/{id}", controller.UpdateUserHandler)

		invalidReq := map[string]interface{}{
			"invalid_field": "value",
		}
		req := testutils.CreatePatchRequest(t, fmt.Sprintf("/users/%d", ID), invalidReq)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusUnprocessableEntity {
			t.Errorf("expected status code %d, got %d", http.StatusUnprocessableEntity, rr.Code)
		}
	})
}
