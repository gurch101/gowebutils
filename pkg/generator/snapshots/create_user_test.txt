package users_test

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	"github.com/gurch101/gowebutils/internal/tenants"
	"github.com/gurch101/gowebutils/internal/users"
	"github.com/gurch101/gowebutils/pkg/collectionutils"
	"github.com/gurch101/gowebutils/pkg/testutils"
	"github.com/gurch101/gowebutils/pkg/validation"
)

func TestCreateUser(t *testing.T) {
	t.Parallel()

	t.Run("successful create", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewCreateUserController(app.App)
		app.TestRouter.Post("/users", controller.CreateUserHandler)
		tenantID, _ := tenants.CreateTestTenant(t, app.DB())
		body := users.CreateTestUserRequest(t)
		body.TenantID = tenantID
		req := testutils.CreatePostRequest(t, "/users", body)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusCreated {
			t.Errorf("expected status code %d, got %d", http.StatusCreated, rr.Code)
		}

		var response users.CreateUserResponse
		err := json.Unmarshal(rr.Body.Bytes(), &response)
		if err != nil {
			t.Fatal(err)
		}

		if response.ID <= 0 {
			t.Errorf("expected ID to be positive, got %d", response.ID)
		}

		location := rr.Header().Get("Location")
		if location == "" {
			t.Errorf("expected Location header to be set")
		}

		if location != fmt.Sprintf("/users/%d", response.ID) {
			t.Errorf("expected Location header to be %s, got %s", fmt.Sprintf("/users/%d", response.ID), location)
		}

		var name string
		var email string
		var someInt64 int64
		var tenantId int64
		var someBool bool

		err = app.DB().QueryRowContext(context.Background(), fmt.Sprintf("SELECT  name  ,email  ,some_int64  ,tenant_id  ,some_bool  FROM users WHERE id = %d", response.ID)).Scan(
			&name,
			&email,
			&someInt64,
			&tenantId,
			&someBool,
		)
		if err != nil {
			t.Fatal(err)
		}
		if name != body.Name {
			t.Errorf("expected name to be %v, got %v", body.Name, name)
		}
		if email != body.Email {
			t.Errorf("expected email to be %v, got %v", body.Email, email)
		}
		if someInt64 != body.SomeInt64 {
			t.Errorf("expected someInt64 to be %v, got %v", body.SomeInt64, someInt64)
		}
		if tenantId != body.TenantID {
			t.Errorf("expected tenantId to be %v, got %v", body.TenantID, tenantId)
		}
		if someBool != body.SomeBool {
			t.Errorf("expected someBool to be %v, got %v", body.SomeBool, someBool)
		}
	})

	t.Run("invalid request body", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewCreateUserController(app.App)
		app.TestRouter.Post("/users", controller.CreateUserHandler)

		payload := map[string]interface{}{
			"invalid": "",
		}
		req := testutils.CreatePostRequest(t, "/users", payload)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusUnprocessableEntity {
			t.Errorf("Expected status code 422 Unprocessable Entity, got %d", rr.Code)
		}
	})

	t.Run("failed request validation", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewCreateUserController(app.App)
		app.TestRouter.Post("/users", controller.CreateUserHandler)

		body := users.CreateUserRequest{
			Name:     "",
			Email:    "invalidemail",
			TenantID: 0,
		}

		req := testutils.CreatePostRequest(t, "/users", body)
		rr := app.MakeRequest(req)

		testutils.AssertValidationErrors(t, rr, validation.ValidationError{
			Errors: []validation.Error{
				{
					Field:   "name",
					Message: "Name is required",
				},
				{
					Field:   "email",
					Message: "Email must be a valid email address",
				},
				{
					Field:   "tenantId",
					Message: "Tenant ID is required",
				},
			},
		})
	})

	t.Run("failed unique constraints", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewCreateUserController(app.App)
		app.TestRouter.Post("/users", controller.CreateUserHandler)

		_, payload := users.CreateTestUser(t, app.DB())

		req := testutils.CreatePostRequest(t, "/users", payload)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusBadRequest {
			t.Errorf("Expected status code 400 Bad Request, got %d", rr.Code)
		}

		var errorResponse testutils.ValidationErrorResponse
		err := json.Unmarshal(rr.Body.Bytes(), &errorResponse)

		if err != nil {
			t.Fatal(err)
		}

		if len(errorResponse.Errors) == 0 {
			t.Error("Expected validation errors, got none")
		}

		var ok bool

		ok = collectionutils.Contains(errorResponse.Errors, func(e validation.Error) bool {
			return e.Field == "name" && e.Message == "Name already exists"
		})

		if !ok {
			t.Errorf("Expected error message for name, but got none")
		}
		ok = collectionutils.Contains(errorResponse.Errors, func(e validation.Error) bool {
			return e.Field == "email" && e.Message == "Email already exists"
		})

		if !ok {
			t.Errorf("Expected error message for email, but got none")
		}
	})

	t.Run("failed Tenant foreign key constraint", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewCreateUserController(app.App)
		app.TestRouter.Post("/users", controller.CreateUserHandler)

		_, payload := users.CreateTestUser(t, app.DB())
		payload.TenantID = 100

		req := testutils.CreatePostRequest(t, "/users", payload)
		rr := app.MakeRequest(req)

		testutils.AssertValidationError(t, rr, "tenantId", "Tenant not found")
	})
}
