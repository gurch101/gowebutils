package users

import (
	"context"
	"net/http"

	"github.com/gurch101/gowebutils/pkg/app"
	"github.com/gurch101/gowebutils/pkg/dbutils"
	"github.com/gurch101/gowebutils/pkg/httputils"
	"github.com/gurch101/gowebutils/pkg/parser"
)

type DeleteUserController struct {
	app *app.App
}

func NewDeleteUserController(app *app.App) *DeleteUserController {
	return &DeleteUserController{app: app}
}

type DeleteUserResponse struct {
	Message string `json:"message"`
}

// DeleteUser godoc
//
//	@Summary		Delete a user
//	@Description	Delete by user ID
//	@Tags			users
//	@Accept			json
//	@Produce		json
//	@Param			id	path		int	true	"user ID"	Format(int64)
//	@Success		200	{object}	DeleteUserResponse
//	@Failure		400,404,422,500	{object}	httputils.ErrorResponse
//	@Router			/users/{id} [delete]
func (tc *DeleteUserController) DeleteUserHandler(w http.ResponseWriter, r *http.Request) {
	id, err := parser.ParseIDPathParam(r)

	if err != nil {
		httputils.NotFoundResponse(w, r)

		return
	}

	err = DeleteUserByID(r.Context(), tc.app.DB(), id)
	if err != nil {
		httputils.HandleErrorResponse(w, r, err)

		return
	}

	err = httputils.WriteJSON(w, http.StatusOK, DeleteUserResponse{Message: "User successfully deleted"}, nil)
	if err != nil {
		httputils.ServerErrorResponse(w, r, err)
	}
}

func DeleteUserByID(ctx context.Context, db dbutils.DB, id int64) error {
	return dbutils.DeleteByID(ctx, db, "users", id)
}
