package users

import (
	"context"
	"net/http"

	"github.com/gurch101/gowebutils/internal/tenants"
	"github.com/gurch101/gowebutils/pkg/app"
	"github.com/gurch101/gowebutils/pkg/dbutils"
	"github.com/gurch101/gowebutils/pkg/httputils"
	"github.com/gurch101/gowebutils/pkg/parser"
	"github.com/gurch101/gowebutils/pkg/validation"
)

type UpdateUserController struct {
	app *app.App
}

func NewUpdateUserController(app *app.App) *UpdateUserController {
	return &UpdateUserController{app: app}
}

type UpdateUserRequest struct {
	Name      *string `json:"name"`
	Email     *string `json:"email"`
	SomeInt64 *int64  `json:"someInt64"`
	TenantID  *int64  `json:"tenantId"`
	SomeBool  *bool   `json:"someBool"`
}

// UpdateUser godoc
//
//	@Summary		Update a User
//	@Description	Update a User by ID
//	@Tags			Users
//	@Accept			json
//	@Produce		json
//	@Param			id		path		int64					true	"User ID"
//	@Param			user	body		UpdateUserRequest	true	"Update user"
//	@Success		200		{object}	GetUserByIDResponse
//	@Failure		400,422,404,500	{object}	httputils.ErrorResponse
//	@Router			/users/{id} [patch]
func (tc *UpdateUserController) UpdateUserHandler(w http.ResponseWriter, r *http.Request) {
	id, err := parser.ParseIDPathParam(r)

	if err != nil {
		httputils.NotFoundResponse(w, r)

		return
	}

	req, err := httputils.ReadJSON[UpdateUserRequest](w, r)
	if err != nil {
		httputils.UnprocessableEntityResponse(w, r, err)

		return
	}

	resp, err := UpdateUser(r.Context(), tc.app.DB(), id, &req)
	if err != nil {
		httputils.HandleErrorResponse(w, r, err)

		return
	}

	err = httputils.WriteJSON(
		w,
		http.StatusOK,
		resp,
		nil)

	if err != nil {
		httputils.ServerErrorResponse(w, r, err)
	}
}

func UpdateUser(
	ctx context.Context,
	db dbutils.DB,
	id int64,
	req *UpdateUserRequest,
) (*GetUserByIDResponse, error) {

	model, err := GetUserByID(ctx, db, id)
	if err != nil {
		return nil, err
	}

	if req.TenantID != nil && *req.TenantID != model.TenantID && !tenants.TenantExists(ctx, db, *req.TenantID) {
		return nil, ErrTenantNotFound
	}
	model.Name = validation.Coalesce(req.Name, model.Name)
	model.Email = validation.Coalesce(req.Email, model.Email)
	model.SomeInt64 = validation.Coalesce(req.SomeInt64, model.SomeInt64)
	model.TenantID = validation.Coalesce(req.TenantID, model.TenantID)
	model.SomeBool = validation.Coalesce(req.SomeBool, model.SomeBool)
	v := validation.NewValidator()
	v.Required(model.Name, "name", "Name is required")
	v.Email(model.Email, "email", "Email must be a valid email address")

	if v.HasErrors() {
		return nil, v.AsError()
	}

	if err := updateUser(ctx, db, model); err != nil {
		return nil, err
	}

	return &GetUserByIDResponse{
		ID:        model.ID,
		Version:   model.Version,
		Name:      model.Name,
		Email:     model.Email,
		SomeInt64: model.SomeInt64,
		TenantID:  model.TenantID,
		SomeBool:  model.SomeBool,
		CreatedAt: model.CreatedAt,
		UpdatedAt: model.UpdatedAt,
	}, nil
}

func updateUser(ctx context.Context, db dbutils.DB, model *userModel) error {
	return dbutils.UpdateByID(ctx, db, "users", model.ID, model.Version, map[string]any{
		"name":       model.Name,
		"email":      model.Email,
		"some_int64": model.SomeInt64,
		"tenant_id":  model.TenantID,
		"some_bool":  model.SomeBool,
	})
}
