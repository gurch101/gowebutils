package users

import (
	"context"
	"database/sql"
	"net/http"
	"time"

	"github.com/gurch101/gowebutils/pkg/app"
	"github.com/gurch101/gowebutils/pkg/dbutils"
	"github.com/gurch101/gowebutils/pkg/httputils"
	"github.com/gurch101/gowebutils/pkg/parser"
	"github.com/gurch101/gowebutils/pkg/validation"
)

type SearchUserController struct {
	app *app.App
}

func NewSearchUserController(app *app.App) *SearchUserController {
	return &SearchUserController{app: app}
}

type SearchUserRequest struct {
	Name      *string
	Email     *string
	SomeInt64 *int64
	TenantID  *int64
	SomeBool  *bool
	parser.Filters
}

type SearchUserResponse struct {
	Metadata parser.PaginationMetadata `json:"metadata"`
	Data     []SearchUserResponseData  `json:"data"`
}

type SearchUserResponseData struct {
	ID        int64     `json:"id"`
	Version   int64     `json:"version"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	SomeInt64 int64     `json:"someInt64"`
	TenantID  int64     `json:"tenantId"`
	SomeBool  bool      `json:"someBool"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// ListUser godoc
//
//	@Summary		List Users
//	@Description	get Users
//	@Tags			Users
//	@Accept			json
//	@Produce		json
//	@Param 			name query string false "name"
//	@Param 			email query string false "email"
//	@Param 			someInt64 query int64 false "someInt64"
//	@Param 			tenantId query int64 false "tenantId"
//	@Param 			someBool query bool false "someBool"
//	@Param			fields query string false "csv list of fields to include. By default all fields are included"
//	@Param      page query int false "page number" minimum(1) default(1)
//	@Param			pageSize	query		int		false	"page size" minimum(1)  maximum(100) default(25)
//	@Param			sort	query		string	false	"sort by field. e.g. field1,-field2"
//	@Success		200	{object}		SearchUserResponse
//	@Failure		400,500	{object}	httputils.ErrorResponse
//	@Router			/users [get]
func (tc *SearchUserController) SearchUserHandler(w http.ResponseWriter, r *http.Request) {
	queryString := r.URL.Query()
	request := &SearchUserRequest{
		Name:      parser.ParseQSString(queryString, "name", nil),
		Email:     parser.ParseQSString(queryString, "email", nil),
		SomeInt64: parser.ParseQSInt64(queryString, "someInt64", nil),
		TenantID:  parser.ParseQSInt64(queryString, "tenantId", nil),
		SomeBool:  parser.ParseQSBool(queryString, "someBool", nil),
	}

	v := validation.NewValidator()
	request.ParseQSMetadata(queryString, v, []string{
		"id",
		"version",
		"name",
		"email",
		"someInt64",
		"tenantId",
		"someBool",
		"createdAt",
		"updatedAt",
	}, []string{
		"id",
		"-id",
		"name",
		"-name",
		"email",
		"-email",
		"someInt64",
		"-someInt64",
		"tenantId",
		"-tenantId",
		"someBool",
		"-someBool",
	})

	if v.HasErrors() {
		httputils.FailedValidationResponse(w, r, v.Errors)
		return
	}

	response, err := SearchUsers(r.Context(), tc.app.DB(), request)
	if err != nil {
		httputils.HandleErrorResponse(w, r, err)
		return
	}

	filteredResponse, err := parser.StructsToFilteredMaps(response.Data, request.Fields)

	if err != nil {
		httputils.ServerErrorResponse(w, r, err)
		return
	}

	err = httputils.WriteJSON(w, http.StatusOK, map[string]interface{}{
		"metadata": response.Metadata,
		"data":     filteredResponse,
	}, nil)

	if err != nil {
		httputils.ServerErrorResponse(w, r, err)
	}
}

func SearchUsers(
	ctx context.Context,
	db dbutils.DB,
	searchUserRequest *SearchUserRequest,
) (*SearchUserResponse, error) {
	models, pagination, err := findUsers(ctx, db, searchUserRequest)
	if err != nil {
		return nil, err
	}

	return &SearchUserResponse{
		Metadata: pagination,
		Data:     models,
	}, nil
}

func findUsers(
	ctx context.Context,
	db dbutils.DB,
	request *SearchUserRequest) ([]SearchUserResponseData, parser.PaginationMetadata, error) {
	var models []SearchUserResponseData
	var totalRecords int

	dbFields := dbutils.BuildSearchSelectFields("users", request.Fields, nil)

	err := dbutils.NewQueryBuilder(db).
		Select(
			dbFields...,
		).
		From("users").
		Where("users.name = ?", request.Name).
		AndWhere("users.email = ?", request.Email).
		AndWhere("users.some_int64 = ?", request.SomeInt64).
		AndWhere("users.tenant_id = ?", request.TenantID).
		AndWhere("users.some_bool = ?", request.SomeBool).
		OrderBy("users."+request.Sort).
		Page(request.Page, request.PageSize).
		QueryContext(ctx, func(rows *sql.Rows) error {
			model, err := ScanUserRecord(rows, dbFields, &totalRecords)

			if err != nil {
				return err
			}

			models = append(models, model)

			return nil
		})

	if err != nil {
		return nil, parser.PaginationMetadata{}, dbutils.WrapDBError(err)
	}

	metadata := parser.ParsePaginationMetadata(totalRecords, request.Page, request.PageSize)
	return models, metadata, nil
}

func ScanUserRecord(rows *sql.Rows, dbFields []string, totalRecords *int) (SearchUserResponseData, error) {
	var m SearchUserResponseData

	fieldsToBindTo := make([]interface{}, len(dbFields))
	fieldsToBindTo[0] = &totalRecords

	for i, field := range dbFields[1:] {
		switch field {
		case "users.id":
			fieldsToBindTo[i+1] = &m.ID
		case "users.version":
			fieldsToBindTo[i+1] = &m.Version
		case "users.name":
			fieldsToBindTo[i+1] = &m.Name
		case "users.email":
			fieldsToBindTo[i+1] = &m.Email
		case "users.some_int64":
			fieldsToBindTo[i+1] = &m.SomeInt64
		case "users.tenant_id":
			fieldsToBindTo[i+1] = &m.TenantID
		case "users.some_bool":
			fieldsToBindTo[i+1] = &m.SomeBool
		case "users.created_at":
			fieldsToBindTo[i+1] = &m.CreatedAt
		case "users.updated_at":
			fieldsToBindTo[i+1] = &m.UpdatedAt
		}
	}

	err := rows.Scan(
		fieldsToBindTo...,
	)

	if err != nil {
		return m, err
	}

	return m, nil
}
