package users_test

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	"github.com/gurch101/gowebutils/internal/users"
	"github.com/gurch101/gowebutils/pkg/testutils"
)

func TestDeleteUser(t *testing.T) {
	t.Parallel()

	t.Run("successful delete", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		deleteController := users.NewDeleteUserController(app.App)

		app.TestRouter.Delete("/users/{id}", deleteController.DeleteUserHandler)

		ID, _ := users.CreateTestUser(t, app.DB())

		deleteURL := fmt.Sprintf("/users/%d", ID)
		deleteReq := testutils.CreateDeleteRequest(deleteURL)
		deleteRr := app.MakeRequest(deleteReq)

		if deleteRr.Code != http.StatusOK {
			t.Errorf("expected status code %d, got %d", http.StatusOK, deleteRr.Code)
		}

		var deleteResponse users.DeleteUserResponse
		err = json.Unmarshal(deleteRr.Body.Bytes(), &deleteResponse)
		if err != nil {
			t.Fatal(err)
		}

		if deleteResponse.Message != "User successfully deleted" {
			t.Errorf("expected message to be 'User successfully deleted', got '%s'", deleteResponse.Message)
		}

		var count int
		err = app.DB().QueryRowContext(context.Background(),
			"SELECT COUNT(*) FROM users WHERE id = $1", ID).Scan(&count)
		if err != nil {
			t.Fatal(err)
		}

		if count != 0 {
			t.Errorf("expected record to be deleted, but it still exists in the database")
		}
	})

	t.Run("delete non-existent record", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewDeleteUserController(app.App)
		app.TestRouter.Delete("/users/{id}", controller.DeleteUserHandler)

		// Use a non-existent ID
		nonExistentID := int64(99999)
		deleteURL := fmt.Sprintf("/users/%d", nonExistentID)
		deleteReq := testutils.CreateDeleteRequest(deleteURL)
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, rr.Code)
		}
	})

	t.Run("invalid ID format", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewDeleteUserController(app.App)
		app.TestRouter.Delete("/users/{id}", controller.DeleteUserHandler)

		// Use an invalid ID format
		deleteURL := "/users/invalid-id"
		deleteReq := testutils.CreateDeleteRequest(deleteURL)
		rr := app.MakeRequest(req)

		// Should return 404 Not Found for invalid ID format
		if rr.Code != http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, rr.Code)
		}
	})
}
