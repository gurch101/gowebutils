package users_test

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"testing"

	"github.com/gurch101/gowebutils/internal/users"
	"github.com/gurch101/gowebutils/pkg/testutils"
)

func TestSearchUser(t *testing.T) {
	t.Parallel()

	t.Run("successful search", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		ID, _ := users.CreateTestUser(t, app.DB())

		controller := users.NewSearchUserController(app.App)
		app.TestRouter.Get("/users", controller.SearchUserHandler)

		req := testutils.CreateGetRequest(t, "/users")
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusOK {
			t.Errorf("expected status code %d, got %d", http.StatusOK, rr.Code)
		}

		var response struct {
			Data []users.SearchUserResponse `json:"users"`
		}
		err := json.Unmarshal(rr.Body.Bytes(), &response)
		if err != nil {
			t.Fatal(err)
		}

		if len(response.Data) != 1 {
			t.Errorf("expected 1 user, got %d", len(response.Data))
		}

		actualRecord, err := users.GetUserByID(context.Background(), app.DB(), ID)
		if err != nil {
			t.Fatal(err)
		}
		if response.Data[0].ID != actualRecord.ID {
			t.Errorf("expected ID to be %v, got %v", actualRecord.ID, response.Data[0].ID)
		}
		if response.Data[0].Version != actualRecord.Version {
			t.Errorf("expected Version to be %v, got %v", actualRecord.Version, response.Data[0].Version)
		}
		if response.Data[0].Name != actualRecord.Name {
			t.Errorf("expected Name to be %v, got %v", actualRecord.Name, response.Data[0].Name)
		}
		if response.Data[0].Email != actualRecord.Email {
			t.Errorf("expected Email to be %v, got %v", actualRecord.Email, response.Data[0].Email)
		}
		if response.Data[0].SomeInt64 != actualRecord.SomeInt64 {
			t.Errorf("expected SomeInt64 to be %v, got %v", actualRecord.SomeInt64, response.Data[0].SomeInt64)
		}
		if response.Data[0].SomeBool != actualRecord.SomeBool {
			t.Errorf("expected SomeBool to be %v, got %v", actualRecord.SomeBool, response.Data[0].SomeBool)
		}
		if response.Data[0].CreatedAt != actualRecord.CreatedAt {
			t.Errorf("expected CreatedAt to be %v, got %v", actualRecord.CreatedAt, response.Data[0].CreatedAt)
		}
		if response.Data[0].UpdatedAt != actualRecord.UpdatedAt {
			t.Errorf("expected UpdatedAt to be %v, got %v", actualRecord.UpdatedAt, response.Data[0].UpdatedAt)
		}
	})

	t.Run("bad sort parameter", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewSearchUserController(app.App)
		app.TestRouter.Get("/users", controller.SearchUserHandler)

		req := testutils.CreateGetRequest(t, "/users?sort=invalid")
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusBadRequest {
			t.Errorf("expected status code %d, got %d", http.StatusBadRequest, rr.Code)
		}

		var response map[string]interface{}
		err := json.Unmarshal(rr.Body.Bytes(), &response)
		if err != nil {
			t.Fatal(err)
		}

		if _, ok := response["errors"]; !ok {
			t.Error("expected validation errors in response")
		}
	})

	t.Run("bad field parameter", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		controller := users.NewSearchUserController(app.App)
		app.TestRouter.Get("/users", controller.SearchUserHandler)

		req := testutils.CreateGetRequest(t, "/users?fields=invalidField")
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusBadRequest {
			t.Errorf("expected status code %d, got %d", http.StatusBadRequest, rr.Code)
		}

		var response map[string]interface{}
		err := json.Unmarshal(rr.Body.Bytes(), &response)
		if err != nil {
			t.Fatal(err)
		}

		if _, ok := response["errors"]; !ok {
			t.Error("expected validation errors in response")
		}
	})

	t.Run("single field", func(t *testing.T) {
		app := testutils.NewTestApp(t)
		defer app.Close()

		users.CreateTestUser(t, app.DB())

		controller := users.NewSearchUserController(app.App)
		app.TestRouter.Get("/users", controller.SearchUserHandler)

		req := testutils.CreateGetRequest(t, "/users?fields=id")
		rr := app.MakeRequest(req)

		if rr.Code != http.StatusOK {
			t.Errorf("expected status code %d, got %d", http.StatusOK, rr.Code)
		}

		if !strings.Contains(rr.Body.String(), "id") {
			t.Errorf("expected response to contain users id, got %s", rr.Body.String())
		}
	})
}
